@{
    ViewData["Title"] = "Analitika";
    var ukupnoOglasa = (int)ViewData["UkupnoOglasa"];
    var topGradovi = (Dictionary<string, int>)ViewData["TopGradovi"];
    var topKorisnici = (Dictionary<string, int>)ViewData["TopKorisnici"];
    var monthlyAds = (Dictionary<string, int>)ViewData["MonthlyAds"];
}

<h2 class="total-ads-heading">Ukupan broj oglasa</h2>

<div class="total-ads-box">
    @ukupnoOglasa
</div>


<div class="gradient-line"></div>

<div class="accordion-container">

    <div class="accordion-item">
        <div class="accordion-header">
            <span><i class="bi bi-geo-alt-fill"></i> Top gradovi po broju oglasa</span>
            <i class="bi bi-chevron-down"></i>
        </div>
        <div class="accordion-content">
            <canvas id="gradChart" class="canvas-style"></canvas>
        </div>
    </div>

    <div class="accordion-item">
        <div class="accordion-header">
            <span><i class="bi bi-person-fill"></i> Korisnici sa najviše postavljenih oglasa</span>
            <i class="bi bi-chevron-down"></i>
        </div>
        <div class="accordion-content">
            <canvas id="korisnikChart" class="canvas-style"></canvas>
        </div>
    </div>

    <div class="accordion-item">
        <div class="accordion-header">
            <span><i class="bi bi-calendar-month"></i> Broj oglasa po mjesecima</span>
            <i class="bi bi-chevron-down"></i>
        </div>
        <div class="accordion-content">
            <canvas id="monthlyAdsChart" class="canvas-style"></canvas>
        </div>
    </div>

    <div class="accordion-item">
        <div class="accordion-header">
            <span><i class="bi bi-pie-chart-fill"></i> Status oglasa</span>
            <i class="bi bi-chevron-down"></i>
        </div>
        <div class="accordion-content">
            <canvas id="statusChart" class="canvas-style"></canvas>
        </div>
    </div>


    <div class="accordion-item">
        <div class="accordion-header">
            <span><i class="bi bi-star-fill"></i> Top 10 najbolje ocijenjenih radnika</span>
            <i class="bi bi-chevron-down"></i>
        </div>
        <div class="accordion-content">
            <table class="table table-striped" style="margin-top: 0;">
                <thead>
                    <tr>
                        <th class="fw-bold">#</th>
                        <th class="fw-bold">Ime i prezime</th>
                        <th class="fw-bold">Prosječna ocjena</th>
                        <th class="fw-bold">Broj recenzija</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int index = 1;
                        var topRadnici = ViewData["TopRadnici"] as List<TopRadnikDTO>;
                        foreach (var radnik in topRadnici)
                        {
                            <tr>
                                <td>@index</td>
                                <td>@radnik.ImePrezime</td>
                                <td>@string.Format("{0:0.00}", radnik.ProsjecnaOcjena)</td>
                                <td>@radnik.BrojRecenzija</td>
                            </tr>
                            index++;
                        }
                    }

                </tbody>
            </table>
        </div>
    </div>

    <div class="accordion-item">
        <div class="accordion-header">
            <span><i class="bi bi-star-half"></i> Top 10 najbolje ocijenjenih poslodavaca</span>
            <i class="bi bi-chevron-down"></i>
        </div>
        <div class="accordion-content">
            <table class="table table-striped" style="margin-top: 0;">
                <thead>
                    <tr>
                        <th class="fw-bold">#</th>
                        <th class="fw-bold">Ime i prezime</th>
                        <th class="fw-bold">Prosječna ocjena</th>
                        <th class="fw-bold">Broj recenzija</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int indexPoslodavac = 1;
						var topPoslodavci = ViewData["TopPoslodavci"] as List<TopPoslodavacDTO>;
						foreach (var poslodavac in topPoslodavci)
                        {
                            <tr>
                                <td>@indexPoslodavac</td>
                                <td>@poslodavac.ImePrezime</td>
                                <td>@string.Format("{0:0.00}", poslodavac.ProsjecnaOcjena)</td>
                                <td>@poslodavac.BrojRecenzija</td>
                            </tr>
                            indexPoslodavac++;
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        let gradChart, korisnikChart, monthlyAdsChart, statusChart;

        function createGradChart() {
            const ctx = document.getElementById('gradChart').getContext('2d');
            gradChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(topGradovi.Keys)),
                    datasets: [{
                        label: 'Broj oglasa',
                        data: @Html.Raw(Json.Serialize(topGradovi.Values)),
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false }
                    }
                }
            });
        }

        function createKorisnikChart() {
            const ctx = document.getElementById('korisnikChart').getContext('2d');
            korisnikChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(topKorisnici.Keys)),
                    datasets: [{
                        label: 'Broj oglasa',
                        data: @Html.Raw(Json.Serialize(topKorisnici.Values)),
                        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    indexAxis: 'y',
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: { boxWidth: 20 }
                        }
                    },
                    scales: {
                        x: { beginAtZero: true }
                    }
                }
            });
        }

        function createMonthlyAdsChart() {
            const ctx = document.getElementById('monthlyAdsChart').getContext('2d');
            monthlyAdsChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(monthlyAds.Keys)),
                    datasets: [{
                        label: 'Broj oglasa',
                        data: @Html.Raw(Json.Serialize(monthlyAds.Values)),
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        fill: true,
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: true, position: 'bottom' }
                    }
                }
            });
        }

        document.querySelectorAll('.accordion-header').forEach((header, index) => {
            header.addEventListener('click', () => {
                const item = header.parentElement;
                const isActive = item.classList.contains('active');
                item.classList.toggle('active');

                if (!isActive) {
                    setTimeout(() => {
                                switch (index) {
            case 0:
                if (gradChart) gradChart.destroy();
                createGradChart();
                break;
            case 1:
                if (korisnikChart) korisnikChart.destroy();
                createKorisnikChart();
                break;
            case 2:
                if (monthlyAdsChart) monthlyAdsChart.destroy();
                createMonthlyAdsChart();
                break;
            case 3:
                if (statusChart) statusChart.destroy();
                createStatusChart();
                break;
        }

                    }, 350);
                }
            });
        });
                function createStatusChart() {
            const ctx = document.getElementById('statusChart').getContext('2d');
            statusChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: @Html.Raw(Json.Serialize(((Dictionary<string, int>)ViewData["StatusiOglasa"]).Keys)),
                    datasets: [{
                        label: 'Broj oglasa po statusu',
                        data: @Html.Raw(Json.Serialize(((Dictionary<string, int>)ViewData["StatusiOglasa"]).Values)),
                        backgroundColor: ['#36A2EB', '#FF6384', '#FFCE56', '#4BC0C0', '#9966FF']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

    </script>
}

